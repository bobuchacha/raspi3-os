
build/kernel8.elf:     file format elf64-littleaarch64
build/kernel8.elf
architecture: aarch64, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0000000000080000

Program Header:
    LOAD off    0x0000000000010000 vaddr 0x0000000000080000 paddr 0x0000000000080000 align 2**16
         filesz 0x0000000000000140 memsz 0x0000000000000140 flags r-x
    LOAD off    0x0000000000010140 vaddr 0xffffffff00100140 paddr 0x0000000000080140 align 2**16
         filesz 0x0000000000000294 memsz 0x0000000000000294 flags r-x
private flags = 0x0:

Sections:
Idx Name          Size      VMA               LMA               File off  Algn
  0 .text.boot    00000140  0000000000080000  0000000000080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         00000008  ffffffff00100140  0000000000080140  00010140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 text.boot     0000028c  ffffffff00100148  0000000000080148  00010148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .debug_info   0000011b  0000000000000000  0000000000000000  000103d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  4 .debug_abbrev 000000c1  0000000000000000  0000000000000000  000104ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  5 .debug_aranges 00000090  0000000000000000  0000000000000000  000105b0  2**4
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_line   0000022f  0000000000000000  0000000000000000  00010640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_str    000000f2  0000000000000000  0000000000000000  0001086f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_line_str 00000051  0000000000000000  0000000000000000  00010961  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .comment      00000044  0000000000000000  0000000000000000  000109b2  2**0
                  CONTENTS, READONLY
 10 .debug_frame  00000058  0000000000000000  0000000000000000  000109f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_rnglists 00000018  0000000000000000  0000000000000000  00010a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
0000000000080000 l    d  .text.boot	0000000000000000 .text.boot
ffffffff00100140 l    d  .text	0000000000000000 .text
ffffffff00100148 l    d  text.boot	0000000000000000 text.boot
0000000000000000 l    d  .debug_info	0000000000000000 .debug_info
0000000000000000 l    d  .debug_abbrev	0000000000000000 .debug_abbrev
0000000000000000 l    d  .debug_aranges	0000000000000000 .debug_aranges
0000000000000000 l    d  .debug_line	0000000000000000 .debug_line
0000000000000000 l    d  .debug_str	0000000000000000 .debug_str
0000000000000000 l    d  .debug_line_str	0000000000000000 .debug_line_str
0000000000000000 l    d  .comment	0000000000000000 .comment
0000000000000000 l    d  .debug_frame	0000000000000000 .debug_frame
0000000000000000 l    d  .debug_rnglists	0000000000000000 .debug_rnglists
0000000000000000 l    df *ABS*	0000000000000000 boot_s.o
0000000000080014 l       .text.boot	0000000000000000 master
000000000008000c l       .text.boot	0000000000000000 proc_hang
0000000000080044 l       .text.boot	0000000000000000 el2_entry
0000000000080028 l       .text.boot	0000000000000000 el3_entry
00000000000800a8 l       .text.boot	0000000000000000 el1_entry
00000000000800ac l       .text.boot	0000000000000000 clear_bss
00000000000800c4 l       .text.boot	0000000000000000 _init_mmu
00000000000800c8 l       .text.boot	0000000000000000 jump_to_kernel_main
0000000000000000 l    df *ABS*	0000000000000000 kernel.c
ffffffff00100140 l       .text	0000000000000000 ___breakpoint
0000000000000000 l    df *ABS*	0000000000000000 mmu.c
0000000000080110 l     F .text.boot	000000000000000c __mmu_init_veneer
0000000000080120 l     F .text.boot	000000000000000c __kernel_main_veneer
00000000000800e0 g       .text.boot	0000000000000000 memcpy
0000000000080000 g       *ABS*	0000000000000000 REAL_LOAD
0000000000080140 g       .text.boot	0000000000000000 _end_code_low
00000000000800d0 g       .text.boot	0000000000000000 memzero
ffffffff00100140 g     F .text	0000000000000008 kernel_main
ffffffff00080000 g       *ABS*	0000000000000000 VIRT_ADDR
0000000000080000 g       .text.boot	0000000000000000 _start
ffffffff00101000 g       text.boot	0000000000000000 bss_end
0000000000000000 g       *ABS*	0000000000000000 bss_size
ffffffff00100148 g     F text.boot	000000000000028c mmu_init
ffffffff00101000 g       text.boot	0000000000000000 _data
ffffffff00101000 g       text.boot	0000000000000000 _end
ffffffff00100148 g       .text	0000000000000000 _end_code_high
ffffffff00101000 g       text.boot	0000000000000000 bss_begin



build/kernel8.elf:     file format elf64-littleaarch64
build/kernel8.elf
architecture: aarch64, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0000000000080000

Program Header:
    LOAD off    0x0000000000010000 vaddr 0x0000000000080000 paddr 0x0000000000080000 align 2**16
         filesz 0x0000000000000140 memsz 0x0000000000000140 flags r-x
    LOAD off    0x0000000000010140 vaddr 0xffffffff00100140 paddr 0x0000000000080140 align 2**16
         filesz 0x0000000000000294 memsz 0x0000000000000294 flags r-x
private flags = 0x0:

Sections:
Idx Name          Size      VMA               LMA               File off  Algn
  0 .text.boot    00000140  0000000000080000  0000000000080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         00000294  ffffffff00100140  0000000000080140  00010140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_info   0000011f  0000000000000000  0000000000000000  000103d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  3 .debug_abbrev 000000c1  0000000000000000  0000000000000000  000104f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  4 .debug_aranges 00000090  0000000000000000  0000000000000000  000105c0  2**4
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  5 .debug_line   0000022f  0000000000000000  0000000000000000  00010650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_str    000000f2  0000000000000000  0000000000000000  0001087f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_line_str 00000051  0000000000000000  0000000000000000  00010971  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .comment      00000044  0000000000000000  0000000000000000  000109c2  2**0
                  CONTENTS, READONLY
  9 .debug_frame  00000058  0000000000000000  0000000000000000  00010a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
0000000000080000 l    d  .text.boot	0000000000000000 .text.boot
ffffffff00100140 l    d  .text	0000000000000000 .text
0000000000000000 l    d  .debug_info	0000000000000000 .debug_info
0000000000000000 l    d  .debug_abbrev	0000000000000000 .debug_abbrev
0000000000000000 l    d  .debug_aranges	0000000000000000 .debug_aranges
0000000000000000 l    d  .debug_line	0000000000000000 .debug_line
0000000000000000 l    d  .debug_str	0000000000000000 .debug_str
0000000000000000 l    d  .debug_line_str	0000000000000000 .debug_line_str
0000000000000000 l    d  .comment	0000000000000000 .comment
0000000000000000 l    d  .debug_frame	0000000000000000 .debug_frame
0000000000000000 l    df *ABS*	0000000000000000 boot_s.o
0000000000080014 l       .text.boot	0000000000000000 master
000000000008000c l       .text.boot	0000000000000000 proc_hang
0000000000080044 l       .text.boot	0000000000000000 el2_entry
0000000000080028 l       .text.boot	0000000000000000 el3_entry
00000000000800a8 l       .text.boot	0000000000000000 el1_entry
00000000000800ac l       .text.boot	0000000000000000 clear_bss
00000000000800c4 l       .text.boot	0000000000000000 _init_mmu
00000000000800c8 l       .text.boot	0000000000000000 jump_to_kernel_main
0000000000000000 l    df *ABS*	0000000000000000 kernel.c
ffffffff00100140 l       .text	0000000000000000 ___breakpoint
0000000000000000 l    df *ABS*	0000000000000000 mmu.c
0000000000080110 l     F .text.boot	000000000000000c __kernel_main_veneer
0000000000080120 l     F .text.boot	000000000000000c __mmu_init_veneer
00000000000800e0 g       .text.boot	0000000000000000 memcpy
0000000000080000 g       *ABS*	0000000000000000 REAL_LOAD
00000000000800d0 g       .text.boot	0000000000000000 memzero
ffffffff00100140 g     F .text	0000000000000008 kernel_main
ffffffff00080000 g       *ABS*	0000000000000000 VIRT_ADDR
ffffffff00101000 g       .text	0000000000000000 data_begin
0000000000080140 g       .text.boot	0000000000000000 boot_code_end
0000000000080000 g       .text.boot	0000000000000000 _start
ffffffff00101000 g       .text	0000000000000000 bss_end
0000000000000000 g       *ABS*	0000000000000000 bss_size
ffffffff00100148 g     F .text	000000000000028c mmu_init
ffffffff00101000 g       .text	0000000000000000 _data
ffffffff00101000 g       .text	0000000000000000 _end
ffffffff00101000 g       .text	0000000000000000 bss_begin
ffffffff001003d4 g       .text	0000000000000000 kernel_code_end
ffffffff00101000 g       .text	0000000000000000 data_end



build/kernel8.elf:     file format elf64-littleaarch64
build/kernel8.elf
architecture: aarch64, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0000000000080000

Program Header:
    LOAD off    0x0000000000010000 vaddr 0x0000000000080000 paddr 0x0000000000080000 align 2**16
         filesz 0x0000000000000140 memsz 0x0000000000000140 flags r-x
    LOAD off    0x0000000000010140 vaddr 0xffffffff00100140 paddr 0x0000000000080140 align 2**16
         filesz 0x0000000000000294 memsz 0x0000000000000294 flags r-x
private flags = 0x0:

Sections:
Idx Name          Size      VMA               LMA               File off  Algn
  0 .text.boot    00000140  0000000000080000  0000000000080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         00000294  ffffffff00100140  0000000000080140  00010140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_info   0000011f  0000000000000000  0000000000000000  000103d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  3 .debug_abbrev 000000c1  0000000000000000  0000000000000000  000104f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  4 .debug_aranges 00000090  0000000000000000  0000000000000000  000105c0  2**4
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  5 .debug_line   0000022f  0000000000000000  0000000000000000  00010650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_str    000000f2  0000000000000000  0000000000000000  0001087f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_line_str 00000051  0000000000000000  0000000000000000  00010971  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .comment      00000044  0000000000000000  0000000000000000  000109c2  2**0
                  CONTENTS, READONLY
  9 .debug_frame  00000058  0000000000000000  0000000000000000  00010a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
0000000000080000 l    d  .text.boot	0000000000000000 .text.boot
ffffffff00100140 l    d  .text	0000000000000000 .text
0000000000000000 l    d  .debug_info	0000000000000000 .debug_info
0000000000000000 l    d  .debug_abbrev	0000000000000000 .debug_abbrev
0000000000000000 l    d  .debug_aranges	0000000000000000 .debug_aranges
0000000000000000 l    d  .debug_line	0000000000000000 .debug_line
0000000000000000 l    d  .debug_str	0000000000000000 .debug_str
0000000000000000 l    d  .debug_line_str	0000000000000000 .debug_line_str
0000000000000000 l    d  .comment	0000000000000000 .comment
0000000000000000 l    d  .debug_frame	0000000000000000 .debug_frame
0000000000000000 l    df *ABS*	0000000000000000 boot_s.o
0000000000080014 l       .text.boot	0000000000000000 master
000000000008000c l       .text.boot	0000000000000000 proc_hang
0000000000080044 l       .text.boot	0000000000000000 el2_entry
0000000000080028 l       .text.boot	0000000000000000 el3_entry
00000000000800a8 l       .text.boot	0000000000000000 el1_entry
00000000000800ac l       .text.boot	0000000000000000 clear_bss
00000000000800c4 l       .text.boot	0000000000000000 _init_mmu
00000000000800c8 l       .text.boot	0000000000000000 jump_to_kernel_main
0000000000000000 l    df *ABS*	0000000000000000 kernel.c
ffffffff00100140 l       .text	0000000000000000 ___breakpoint
0000000000000000 l    df *ABS*	0000000000000000 mmu.c
0000000000080110 l     F .text.boot	000000000000000c __kernel_main_veneer
0000000000080120 l     F .text.boot	000000000000000c __mmu_init_veneer
00000000000800e0 g       .text.boot	0000000000000000 memcpy
0000000000080000 g       *ABS*	0000000000000000 REAL_LOAD
00000000000800d0 g       .text.boot	0000000000000000 memzero
ffffffff00100140 g     F .text	0000000000000008 kernel_main
ffffffff00080000 g       *ABS*	0000000000000000 VIRT_ADDR
ffffffff00101000 g       .text	0000000000000000 data_begin
0000000000080140 g       .text.boot	0000000000000000 boot_code_end
0000000000080000 g       .text.boot	0000000000000000 _start
ffffffff00101000 g       .text	0000000000000000 bss_end
0000000000000000 g       *ABS*	0000000000000000 bss_size
ffffffff00100148 g     F .text	000000000000028c mmu_init
ffffffff00101000 g       .text	0000000000000000 _data
ffffffff00101000 g       .text	0000000000000000 _end
ffffffff00101000 g       .text	0000000000000000 bss_begin
ffffffff001003d4 g       .text	0000000000000000 kernel_code_end
ffffffff00101000 g       .text	0000000000000000 data_end



build/kernel8.elf:     file format elf64-littleaarch64
build/kernel8.elf
architecture: aarch64, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0000000000080000

Program Header:
    LOAD off    0x0000000000010000 vaddr 0x0000000000080000 paddr 0x0000000000080000 align 2**16
         filesz 0x0000000000000140 memsz 0x0000000000000140 flags r-x
    LOAD off    0x0000000000010140 vaddr 0xffffffff00100140 paddr 0x0000000000080140 align 2**16
         filesz 0x0000000000000294 memsz 0x0000000000000294 flags r-x
private flags = 0x0:

Sections:
Idx Name          Size      VMA               LMA               File off  Algn
  0 .text.boot    00000140  0000000000080000  0000000000080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         00000294  ffffffff00100140  0000000000080140  00010140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_info   0000011f  0000000000000000  0000000000000000  000103d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  3 .debug_abbrev 000000c1  0000000000000000  0000000000000000  000104f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  4 .debug_aranges 00000090  0000000000000000  0000000000000000  000105c0  2**4
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  5 .debug_line   0000022f  0000000000000000  0000000000000000  00010650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_str    000000f2  0000000000000000  0000000000000000  0001087f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_line_str 00000051  0000000000000000  0000000000000000  00010971  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .comment      00000044  0000000000000000  0000000000000000  000109c2  2**0
                  CONTENTS, READONLY
  9 .debug_frame  00000058  0000000000000000  0000000000000000  00010a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
0000000000080000 l    d  .text.boot	0000000000000000 .text.boot
ffffffff00100140 l    d  .text	0000000000000000 .text
0000000000000000 l    d  .debug_info	0000000000000000 .debug_info
0000000000000000 l    d  .debug_abbrev	0000000000000000 .debug_abbrev
0000000000000000 l    d  .debug_aranges	0000000000000000 .debug_aranges
0000000000000000 l    d  .debug_line	0000000000000000 .debug_line
0000000000000000 l    d  .debug_str	0000000000000000 .debug_str
0000000000000000 l    d  .debug_line_str	0000000000000000 .debug_line_str
0000000000000000 l    d  .comment	0000000000000000 .comment
0000000000000000 l    d  .debug_frame	0000000000000000 .debug_frame
0000000000000000 l    df *ABS*	0000000000000000 boot_s.o
0000000000080014 l       .text.boot	0000000000000000 master
000000000008000c l       .text.boot	0000000000000000 proc_hang
0000000000080044 l       .text.boot	0000000000000000 el2_entry
0000000000080028 l       .text.boot	0000000000000000 el3_entry
00000000000800a8 l       .text.boot	0000000000000000 el1_entry
00000000000800ac l       .text.boot	0000000000000000 clear_bss
00000000000800c4 l       .text.boot	0000000000000000 _init_mmu
00000000000800c8 l       .text.boot	0000000000000000 jump_to_kernel_main
0000000000000000 l    df *ABS*	0000000000000000 kernel.c
ffffffff00100140 l       .text	0000000000000000 ___breakpoint
0000000000000000 l    df *ABS*	0000000000000000 mmu.c
0000000000080110 l     F .text.boot	000000000000000c __kernel_main_veneer
0000000000080120 l     F .text.boot	000000000000000c __mmu_init_veneer
00000000000800e0 g       .text.boot	0000000000000000 memcpy
0000000000080000 g       *ABS*	0000000000000000 REAL_LOAD
00000000000800d0 g       .text.boot	0000000000000000 memzero
ffffffff00100140 g     F .text	0000000000000008 kernel_main
ffffffff00080000 g       *ABS*	0000000000000000 VIRT_ADDR
ffffffff00101000 g       .text	0000000000000000 data_begin
0000000000080140 g       .text.boot	0000000000000000 boot_code_end
0000000000080000 g       .text.boot	0000000000000000 _start
ffffffff00101000 g       .text	0000000000000000 bss_end
0000000000000000 g       *ABS*	0000000000000000 bss_size
ffffffff00100148 g     F .text	000000000000028c mmu_init
ffffffff00101000 g       .text	0000000000000000 _data
ffffffff00101000 g       .text	0000000000000000 _end
ffffffff00101000 g       .text	0000000000000000 bss_begin
ffffffff001003d4 g       .text	0000000000000000 kernel_code_end
ffffffff00101000 g       .text	0000000000000000 data_end


